#
#    ███████╗███████╗██╗  ██╗██████╗  ██████╗   ██╗      ██████╗  ██████╗ █████╗ ██╗     
#    ╚══███╔╝██╔════╝██║  ██║██╔══██╗██╔════╝   ██║     ██╔═══██╗██╔════╝██╔══██╗██║     
#      ███╔╝ ███████╗███████║██████╔╝██║        ██║     ██║   ██║██║     ███████║██║     
#     ███╔╝  ╚════██║██╔══██║██╔══██╗██║        ██║     ██║   ██║██║     ██╔══██║██║     
# ██╗███████╗███████║██║  ██║██║  ██║╚██████╗██╗███████╗╚██████╔╝╚██████╗██║  ██║███████╗
# ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝╚══════╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚══════╝
## An amalgamation of ZSHRCs w/ Edits & Debugging + Code Additions by J-RAD Tibideaux (pronounced Tibi-day-OXsss) debugspray@github



if ! pidof -x "Hyprland" >/dev/null; then
    exec initHypr
fi


## Settings for umask
if (( EUID == 0 )); then
    umask 002
else
    umask 022
fi

bindkey -M menuselect 'h' vi-backward-char        # left
bindkey -M menuselect 'k' vi-up-line-or-history   # up
bindkey -M menuselect 'l' vi-forward-char         # right
bindkey -M menuselect 'j' vi-down-line-or-history # bottom

## set command prediction from history, see 'man 1 zshcontrib'
zrcautoload predict-on && \
zle -N predict-on         && \
zle -N predict-off        && \
bindkey "^X^Z" predict-on && \
bindkey "^Z" predict-off

#$1## press ctrl-q to quote line:
mquote () {
      zle beginning-of-line
      zle forward-word
      # RBUFFER="'$RBUFFER'"
      RBUFFER=${(q)RBUFFER}
      zle end-of-line
}
zle -N mquote && bindkey '^q' mquote

## define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default
WORDCHARS=.
WORDCHARS='*?_[]~=&;!#$%^(){}'
WORDCHARS='${WORDCHARS:s@/@}'

# just type '...' to get '../..'
rationalise-dot() {
local MATCH
if [[ $LBUFFER =~ '(^|/| |	|'$'\n''|\||;|&)\.\.$' ]]; then
  LBUFFER+=/
  zle self-insert
  zle self-insert
else
  zle self-insert
fi
}
zle -N rationalise-dot
bindkey . rationalise-dot
bindkey -M isearch . self-insert
bindkey '\eq' push-line-or-edit

## compsys related snippets ##

## changed completer settings
zstyle ':completion:*' completer _complete _correct _approximate
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' completer _expand_alias _complete _approximate
zstyle ':completion:*' special-dirs true
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*:cd:*' ignore-parents parent pwd
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*'   force-list always
zstyle ':completion:*' completer _complete _match _approximate
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion:*:*:xdvi:*' menu yes select
zstyle ':completion:*:*:xdvi:*' file-sort time
zstyle ':chpwd:profiles:/usr/src/grml(|/|/*)'   profile grml
zstyle ':chpwd:profiles:/usr/src/debian(|/|/*)' profile debian
chpwd_profiles


_cdlsd() {
  if (( $+2 )); then
    builtin cd "$@"
    ls $o
    return 0
  fi
  if (( ${#argv} == 1 )) && [[ -f ${1} ]]; then
    [[ ! -e ${1:h} ]] && return 1
    echo "${yellow}cd ${1:h}${NC}" >&2
    builtin cd "${1:h}"
    ls $o
  fi
  builtin cd "${@}"
  ls $o
}
alias cd='_cdlsd'

export MANWIDTH=${MANWIDTH:-80}

cdpath=(.. ~)
manzsh()  { /usr/bin/man zshall |  most +/"$1" ; }
bash() {
    NO_SWITCH="yes" command bash "$@"
}
contains() { grep -q "$*" $REPLY }
sameas() { diff -q "$*" $REPLY &>/dev/null }
ot () { [[ $REPLY -ot ${~1} ]] }

ic_get() {
    emulate -L zsh
    local port
    if [[ ! -z $1 ]] ; then
        port=${2:-143}
        print "querying imap server on $1:${port}...\n";
        print "a1 capability\na2 logout\n" | nc $1 ${port}
    else
        print "usage:\n  $0 <imap-server> [port]"
    fi
}

plap() {
    emulate -L zsh
    if [[ $# = 0 ]] ; then
        echo "Usage:    $0 program"
        echo "Example:  $0 zsh"
        echo "Lists all occurrences of program in the current PATH."
   else
        ls -l ${^path}/*$1*(*N)
    fi
}
lcheck() {
    if [[ -n "$1" ]] ; then
        nm -go /usr/lib/lib*.a 2>/dev/null | grep ":[[:xdigit:]]\{8\} . .*$1"
    else
        echo "Usage: lcheck <function>" >&2
    fi
}
uopen() {
                           emulate -L zsh
    if ! [[ -n "$1" ]] ; then
        print "Usage: open \$URL/\$file">&2
        return 1
    else
        FILE=$1
        MIME=$(curl --head $FILE | \
               grep Content-Type | \
               cut -d ' ' -f 2 | \
               cut -d\; -f 1)
        MIME=${MIME%$'\r'}
        curl $FILE | see ${MIME}:-
    fi
}
memusage() {
    ps aux | awk '{if (NR > 1) print $5;
                   if (NR > 2) print "+"}
                   END { print "p" }' | dc
}
hex() {
    emulate -L zsh
    if [[ -n "$1" ]]; then
        printf "%x\n" $1
    else
        print 'Usage: hex <number-to-convert>'
        return 1
    fi
}
_zsh_history_vacuum() {
  
    if ! [[ -o login ]] || ! [[ -o interactive ]] || ! [[ -f "${HISTFILE}" ]]; then
        return 0
    fi

    local suffix="${RANDOM}-${$}"
    local history_new="${HISTFILE}.new.${suffix}"
    local history_tmp="${HISTFILE}.tmp.${suffix}"

    # Strips duplicates while also taking care of small corruptions and otherwise binary data in .zsh_history.
    cp -a --reflink=auto "${HISTFILE}" "${history_tmp}" && \
    cat -v "${history_tmp}" | tac | awk '!x[$0]++' | tac >"${history_new}" && \
    mv "${history_new}" "${HISTFILE}" && \
    fc -R && \
    rm -f "${history_tmp}"
}
_zsh_history_vacuum
run_under_tmux() {
    check_com -c tmux || return 1

    if [ -z "$1" ]; then return 1; fi
        local name="$1"
    if [ -n "$2" ]; then
        local execute="$2"
    else
        local execute="command ${name}"
    fi

    if tmux has-session -t "${name}" 2>/dev/null; then
        tmux attach -d -t "${name}"
    else
        tmux new-session -s "${name}" "${execute}" \; set-option status \; set set-titles-string "${name} (tmux@${HOST})"
    fi
}
over_ssh() {
    if [ -n "${SSH_CLIENT}" ]; then
        return 0
   else
        return 1
    fi
}
redo() { 
   local answer
   local rel='"${SHELL}" "$@"'
    echo -ne "WARNING: Are you sure you want to '${YELLOW}$*${NC}' [yN]? "
    read -q answer
        echo
        shift
    if [[ "${answer}" =~ ^[Yy]$ ]]; then
      $(exec "$SHELL" "$@")
    fi
}
# confirmity
confirm() {
    local answer
    echo -ne "WARNING: Are you sure you want to '${YELLOW}$*${NC}' [yN]? "
    read -q answer
        echo
    if [[ "${answer}" =~ ^[Yy]$ ]]; then
        command "${@}"
    else
        echo "Um..no." 2>&1
    fi
}
confirm_wrapper() {
    if [ "$1" = '--root' ]; then
        local as_root='true'
        shift
    elif [ "$1" = '--user' ]; then
        local as_user='true'
        shift
    else 
        exit 1
    fi
    
    local prefix=''
    if [ "${as_root}" = 'true' ] && [ "${USER}" != 'root' ]; then
        prefix="sudo"
    fi
    confirm ${prefix} "$@"
}
poweroff() { confirm_wrapper --root $0 "$@"; }
reboot() { confirm_wrapper --root $0 "$@"; }
hibernate() { confirm_wrapper --root $0 "$@"; }
reload() { exec "$SHELL" "$@" }

termtitle() {
    case "$TERM" in
        rxvt*|xterm*|wezterm|nxterm|gnome|screen|screen-*|st|st-*)
            local prompt_host="${(%):-%m}"
            local prompt_user="${(%):-%n}"
            local prompt_char="${(%):-%~}"
            case "$1" in
                precmd)
                    printf '\e]0;%s@%s: %s\a' "${prompt_user}" "${prompt_host}" "${prompt_char}"
                ;;
                preexec)
                    printf '\e]0;%s [%s@%s: %s]\a' "$2" "${prompt_user}" "${prompt_host}" "${prompt_char}"
                    ;;
            esac
        ;;
    esac
}
man() {
    if check_com -c vimmanpager; then
        PAGER="vimmanpager" command man "$@"
    else
        command man "$@"
    fi
}
# Mapping command completion to another name.
compdefas () {
  if (($+_comps[$1])); then
    compdef $_comps[$1] ${^@[2,-1]}=$1
  fi
}
# ...and do not log out in some specific terminals:
if [[ "${TERM}" == ([Exa]term*|rxvt|kitty|wezterm|foot|dtterm|screen*) ]] ; then
    unset TMOUT
else
    TMOUT=1800
fi
## associate types and extensions (be aware with perl scripts and anwanted behaviour!)
check_com zsh-mime-setup || { autoload zsh-mime-setup && zsh-mime-setup }
## ctrl-s will no longer freeze the terminal.
stty erase "^?"
## you want to automatically use a bigger font on big terminals?
if [[ "$TERM" == "xterm*" ]] && [[ "$LINES" -ge 50 ]] && [[ "$COLUMNS" -ge 100 ]] && [[ -z "$SSH_CONNECTION" ]] ; then
    large
fi

_select_path_with_fzy() {
    (
        if [ "$1" != '.' ]; then
            if ! [ -d $~1 ]; then
                echo -e "${yellow}The $1 is not a directory.${NC}"  >&2
                return
            fi
            cd $~1
        fi

        find -L . \( -type d -printf "%p/\n" , -type f -print \) 2>/dev/null | cut -c 3- | sort | fzy
    )
}
_append_path_to_buffer() {
    local selected_path

    if ! check_com -c fzy; then
        echo 'No fzy binary found in $PATH.'
        return 1
    fi
    echo
    print -nr "${zle_bracketed_paste[2]}" >/dev/tty
    {
        if [ "${LBUFFER[-1]}" = '/' ]; then
            search_in="${LBUFFER##*[$'\t' ]}"
        else
            search_in='.'
        fi

        selected_path="$(_select_path_with_fzy "${search_in}")"
    } always {
        print -nr "${zle_bracketed_paste[1]}" >/dev/tty
    }
    if [ "${selected_path}" ]; then
        if [[ "${LBUFFER[-1]}" =~ [[:alnum:]] ]]; then
           LBUFFER+=" "
        fi
        LBUFFER+="${(q)selected_path}"
    fi
    zle reset-prompt
}
zle -N _append_path_to_buffer
bindkey "^F" _append_path_to_buffer

_history_search_with_fzy() {
    local selected_history_entry

    if ! check_com -c fzy; then
        echo 'No fzy binary found in $PATH.'
        return 1
    fi

    if ! check_com -c awk; then  
        echo 'No awk binary found in $PATH.'
        return 1
    fi
    echo

    print -nr "${zle_bracketed_paste[2]}" >/dev/tty
    {
        selected_history_entry="$(fc -nrl 1 | awk '!v[$0]++' | fzy)"
    } always {
        print -nr "${zle_bracketed_paste[1]}" >/dev/tty
    }
    if [ "${ eselected_history_entry}" ]; then
        BUFFER="${selected_history_entry}"
        CURSOR="${#BUFFER}"
    fi
    zle reset-prompt
}
zle -N _history_search_with_fzy
bindkey "^T" _history_search_with_fzy

_open_new_terminal_here(){
    if \
        [ "${XAUTHORITY}" ] && \
        [ "${DISPLAY}" ] && \
        [ "${LOGNAME}" = "$(logname)" ] && \
        check_com -c urxvt
    then
       env -i \
            XAUTHORITY="${XAUTHORITY}" \
            PATH="${PATH}" \
            HOME="${HOME}" \
            DISPLAY="${DISPLAY}" \
            LOGNAME="${LOGNAME}" \
            SHELL="${SHELL}" \
            LANG="${LANG}" \
            urxvt -e "${SHELL}" --login >/dev/null 2>&1 &!
    fi
}
zle -N _open_new_terminal_here
bindkey "^A" _open_new_terminal_here

rationalise-dot() {
  if [[ $LBUFFER = *.. ]]; then
    LBUFFER+=/..
  else
    LBUFFER+=.
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

## Some quick Perl-hacks aka /useful/ oneliner
bew() { perl -le 'print unpack "B*","'$1'"' }
web() { perl -le 'print pack "B*","'$1'"' }
hew() { perl -le 'print unpack "H*","'$1'"' }
weh() { perl -le 'print pack "H*","'$1'"' }
pversion()    { perl -M$1 -le "print $1->VERSION" } # i. e."pversion LWP -> 5.79"
getlinks ()   { perl -ne 'while ( m/"((www|ftp|http):\/\/.*?)"/gc ) { print $1, "\n"; }' $* }
ethrefs ()   { perl -ne 'while ( m/href="([^"]*)"/gc ) { print $1, "\n"; }' $* }
getanames ()  { perl -ne 'while ( m/a name="([^"]*)"/gc ) { print $1, "\n"; }' $* }
getforms ()   { perl -ne 'while ( m:(\</?(input|form|select|option).*?\>):gic ) { print $1, "\n"; }' $* }
getstrings () { perl -ne 'while ( m/"(.*?)"/gc ) { print $1, "\n"; }' $*}
getanchors () { perl -ne 'while ( m/«([^«»\n]+)»/gc ) { print $1, "\n"; }' $* }
showINC ()    { perl -e 'for (@INC) { printf "%d %s\n", $i++, $_ }' }
vimpm ()      { vim `perldoc -l $1 | sed -e 's/pod$/pm/'` }
vimhelp ()    { vim -c "help $1" -c on -c "au! VimEnter *" }

for zshd in $(/usr/bin/ls -A ${HOME}/.zsh/conf.d/^*.(z)sh$); do
	xsource "${zshd}"
done

xsource ${ZSHDDIR}/conf.d/zsh-syntax-highlighting.zsh
xsource ${ZSHDDIR}/conf.d/zsh-history-substring-search.zsh
xsource ${ZSHDDIR}/conf.d/fizsh-miscellaneous.zsh
xsource ${ZSHDDIR}/conf.d/Hyde.zsh
check_com -c starship && eval "$(starship init zsh)"
check_com -c zoxide && eval "$(zoxide init zsh)"

# make sure our environment is clean regarding colors
builtin unset -v BLUE blue RED red GREEN green CYAN cyan YELLOW yellow PURPLE purple NC

fastfetch

# END OF FILE #################################################################xtr

