#
#    ███████╗███████╗██╗  ██╗██████╗  ██████╗   ██████╗ ██████╗ ███████╗
#    ╚══███╔╝██╔════╝██║  ██║██╔══██╗██╔════╝   ██╔══██╗██╔══██╗██╔════╝
#      ███╔╝ ███████╗███████║██████╔╝██║        ██████╔╝██████╔╝█████╗  
#     ███╔╝  ╚════██║██╔══██║██╔══██╗██║        ██╔═══╝ ██╔══██╗██╔══╝  
# ██╗███████╗███████║██║  ██║██║  ██║╚██████╗██╗██║     ██║  ██║███████╗
# ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝╚═╝     ╚═╝  ╚═╝╚══════╝
# First in the string of .zshrc config files to load in order to override defaults in the .zshrd file
# Conceived by members of grml-core grml@github
# Created/Populated/Coded by theSelfProclaimedGenius J-RAD Tibideaux (pronounced Tibi-day-OXss)

if [ -r ~/.zshrc -a -r ~/.zshrc.global -a ! -r ~/.zshrc.local ] ; then
    pyfiglet -f dos_rebel --width 650 DROP DEAD ZSHELL IMPORTANT INFO
    printf '-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-\n'
    printf '-!- It looks like you removed, renamed, or lost a file somewhere. -!-\n'
    printf '-!- This amalgamation of zsh Configurations utilizes a three tier -!-\n'
    printf '-!- approach to its .zshrc filesystem:                            -!-\n'
    printf '-!- .zshrc.pre, .zshrc (global), and .zshrc.local and load thusly:-!-\n'
    printf '-!- .zshrc(global) -> .zshrc.pre -> .zshrc(global) -> .zshrc.local-!-\n'
    printf '-!-        touch ~/.zshrc.local                                   -!-\n'
    printf '-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-\n'
fi
# setting some default values
NOCOR=${NOCOR:-0}
NOETCHOSTS=${NOETCHOSTS:-0}
NOMENU=${NOMENU:-0}
NOPRECMD=${NOPRECMD:-0}
COMMAND_NOT_FOUND=${COMMAND_NOT_FOUND:-0}
GRML_ZSH_CNF_HANDLER=${GRML_ZSH_CNF_HANDLER:-/usr/share/command-not-found/command-not-found}
GRML_DISPLAY_BATTERY=${GRML_DISPLAY_BATTERY:-${BATTERY:-0}}
GRMLSMALL_SPECIFIC=${GRMLSMALL_SPECIFIC:-1}
ZSH_NO_DEFAULT_LOCALE=${ZSH_NO_DEFAULT_LOCALE:-0}
# generic $PATH handling
ADDONS+=( $HOME/bin )
ADDONS+=( $HOME/.bin )
ADDONS+=( $HOME/go/bin )
ADDONS+=( $HOME/.cargo/bin )
ADDONS+=( $HOME/.local/bin )
ADDONS+=( $HOME/.local/share/gem/ruby/3.0.0/bin )
ADDONS+=( /var/lib/flatpak/exports/bin )
## aliases ##
alias -g edge='/usr/bin/microsoft-edge-stable'
alias -s conf=micro
alias -s html=edge
alias -s org=edge
alias -s net=edge
alias -s png=krita
alias -s zsh=nvim
alias -s zshrc=nvim
alias -s local=nvim
alias -s kra=krita
alias -s py=nvim
alias -s zip=Xarchiver
alias -s tar=Xarchiver
## translate
alias u='translate -i'
## ignore ~/.ssh/known_hosts entries
alias insecssh='ssh -o "StrictHostKeyChecking=no" -o "UserKnownHostsFile=/dev/null" -o "PreferredAuthentications=keyboard-interactive"'
## instead of global aliase it might be better to use grmls $abk assoc array, whose contents are expanded after pressing ,. ctrl-x
alias -g ls='lsd '
alias -g SnL="| sort -n | less"
alias -g SL="| sort | less"
alias -g L="| less"
alias -g NL=">/dev/null"
alias -g nV="| nvim -"
alias -g eM="| emacs -"
alias -g t10='print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10'
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g CA="2>&1 | cat -A"
alias -g C='| wc -l'
alias -g D="DISPLAY=:0.0"
alias -g DN=/dev/null
alias -g ED="export DISPLAY=:0.0"
alias -g EG='|& egrep'
alias -g EH='|& head'
alias -g EL='|& less'
alias -g ELS='|& less -S'
alias -g ETL='|& tail -20'
alias -g ET='|& tail'
alias -g F=' | fmt -'
alias -g G='| egrep'
alias -g H='| head'
alias -g HL='|& head -20'
alias -g Sk="*~(*.bz2|*.gz|*.tgz|*.zip|*.z)"
alias -g LL="2>&1 | less"
alias -g L="| less"
alias -g LS='| less -S'
alias -g MM='| most'
alias -g M='| more'
alias -g NE="2> /dev/null"
alias -g NS='| sort -n'
alias -g NUL="> /dev/null 2>&1"
alias -g PIPE='|'
alias -g R=' > /c/aaa/tee.txt '
alias -g RNS='| sort -nr'
alias -g S='| sort'
alias -g TL='| tail -20'
alias -g T='| tail'
alias -g US='| sort -u'
alias -g VM=/var/log/messages
alias -g X0G='| xargs -0 egrep'
alias -g X0='| xargs -0'
alias -g XG='| xargs egrep'
alias -g X='| xargs'## get top 10 shell commands:
alias top10='print -l ${(o)history%% *} | uniq -c | sort -nr | head -n 10'
alias -g NL='>/dev/null'
alias -g ls='lsd'
## Execute \kbd{./configure}
alias CO="./configure"
## Execute \kbd{./configure --help}
alias CH="./configure --help"
alias -s pl='perl -S'

# lsd's lament (all lsd related code is also copied in .zshrc.local in case any grml aliases or functions weren't successfully purged that affect cd, ls, lsd in a way that negates the code below. I like my directories to be listed when I change into them, and will break any code meant to deny me my custom configuration of GNU consonants (cd-ls-lsd-pwd-cp-xcp)
typeset -ga lsdopts

lsdopts+=( -AFL )
lsdopts+=( --color always )
lsdopts+=( --icon always )
lsdopts+=( --icon-theme fancy )
lsdopts+=( --group-directories-first )
lsdopts+=( --date +%A-%I:%M )
lsdopts+=( --permission octal )

_lsdopts() {
    local o=${lsdopts:+${lsdopts[*]}}
    alias lsd='lsd '$o
    alias ls='lsd '$o
    alias l='ls '$o
    alias ll='ls -1l '$o
    alias lr='ls -R '$o
    alias lt='ls --tree '$o
}

_lsdopts
# 'hash' some often used directories
# start
hash -d doc=/usr/share/doc
hash -d linux=/lib/modules/$(command uname -r)/build/
hash -d log=/var/log
hash -d slog=/var/log/syslog
hash -d src=/usr/src
hash -d www=/var/www
#d# end
function check_com () {
    emulate -L zsh
    local -i comonly gatoo
    comonly=0
    gatoo=0

    if [[ $1 == '-c' ]] ; then
        comonly=1
        shift 1
    elif [[ $1 == '-g' ]] ; then
        gatoo=1
        shift 1
    fi

    if (( ${#argv} != 1 )) ; then
        printf 'usage: check_com [-c|-g] <command>\n' >&2
        return 1
    fi

    if (( comonly > 0 )) ; then
        (( ${+commands[$1]}  )) && return 0
        return 1
    fi

    if     (( ${+commands[$1]}    )) \
        || (( ${+functions[$1]}   )) \
        || (( ${+aliases[$1]}     )) \
        || (( ${+reswords[(r)$1]} )) ; then
        return 0
    fi

    if (( gatoo > 0 )) && (( ${+galiases[$1]} )) ; then
        return 0
    fi

    return 1
}

# some aliases
if check_com -c screen ; then
    if [[ $UID -eq 0 ]] ; then
        if [[ -r /etc/grml/screenrc ]]; then
            alias screen='screen -c /etc/grml/screenrc'
        fi
    elif [[ ! -r $HOME/.screenrc ]] ; then
        if [[ -r /etc/grml/screenrc_grml ]]; then
            alias screen='screen -c /etc/grml/screenrc_grml'
        else
            if [[ -r /etc/grml/screenrc ]]; then
                alias screen='screen -c /etc/grml/screenrc'
            fi
        fi
    fi
fi
# use ip from iproute2 with color support
if ip -color=auto addr show dev lo >/dev/null 2>&1; then
    alias ip='command ip -color=auto'
fi
if [[ -r /proc/mdstat ]]; then
    alias mdstat='cat /proc/mdstat'
fi
alias ...='cd ../../'
# generate alias named "$KERNELVERSION-reboot" so you can use boot with kexec:
if [[ -x /sbin/kexec ]] && [[ -r /proc/cmdline ]] ; then
    alias "$(uname -r)-reboot"="kexec -l --initrd=/boot/initrd.img-"$(uname -r)" --command-line=\"$(cat /proc/cmdline)\" /boot/vmlinuz-"$(uname -r)""
fi
# see http://www.cl.cam.ac.uk/~mgk25/unicode.html#term for details
alias term2iso="echo 'Setting terminal to iso mode' ; print -n '\e%@'"
alias term2utf="echo 'Setting terminal to utf-8 mode'; print -n '\e%G'"
# make sure it is not assigned yet
[[ -n ${aliases[utf2iso]} ]] && unalias utf2iso
function utf2iso () {
    if isutfenv ; then
        local ENV
        for ENV in $(env | command grep -i '.utf') ; do
            eval export "$(echo $ENV | sed 's/UTF-8/iso885915/ ; s/utf8/iso885915/')"
        done
    fi
}
# make sure it is not assigned yet
[[ -n ${aliases[iso2utf]} ]] && unalias iso2utf
function iso2utf () {
    if ! isutfenv ; then
        local ENV
        for ENV in $(env | command grep -i '\.iso') ; do
            eval export "$(echo $ENV | sed 's/iso.*/UTF-8/ ; s/ISO.*/UTF-8/')"
        done
    fi
}


## some popular options ##

setopt histallowclobber
setopt nonomatch
setopt NO_clobber
setopt nocheckjobs
setopt printexitvalue
setopt interactivecomments
setopt histignorealldups
setopt append_history
setopt share_history
setopt extended_history
setopt histignorespace
setopt auto_cd
setopt extended_glob
setopt longlistjobs
setopt notify
setopt hash_list_all
setopt completeinword
setopt nohup
setopt auto_pushd
setopt nobeep
setopt pushd_ignore_dups
setopt noglobdots
setopt noshwordsplit
setopt unset

# completion system:
function grmlcomp () {
    # TODO: This could use some additional information
    # Make sure the completion system is initialised
    (( ${+_comps} )) || return 1
    # allow one error for every three characters typed in approximate completer
    zstyle ':completion:*:approximate:'    max-errors 'reply=( $((($#PREFIX+$#SUFFIX)/3 )) numeric )'
    # don't complete backup files as executables
    zstyle ':completion:*:complete:-command-::commands' ignored-patterns '(aptitude-*|*\~)'
    # start menu completion only if it could find no unambiguous initial string
    zstyle ':completion:*:correct:*'       insert-unambiguous true
    zstyle ':completion:*:corrections'     format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}'
    zstyle ':completion:*:correct:*'       original true
    # activate color-completion
    zstyle ':completion:*:default'         list-colors ${(s.:.)LS_COLORS}
    # format on completion
    zstyle ':completion:*:descriptions'    format $'%{\e[0;31m%}completing %B%d%b%{\e[0m%}'
    zstyle ':completion:*:expand:*'        tag-order all-expansions
    zstyle ':completion:*:history-words'   list false
    # activate menu
    zstyle ':completion:*:history-words'   menu yes
    # ignore duplicate entries
    zstyle ':completion:*:history-words'   remove-all-dups yes
    zstyle ':completion:*:history-words'   stop yes
    # match uppercase from lowercase
    zstyle ':completion:*'                 matcher-list 'm:{a-z}={A-Z}'
    # separate matches into groups
    zstyle ':completion:*:matches'         group 'yes'
    zstyle ':completion:*'                 group-name ''
    if [[ "$NOMENU" -eq 0 ]] ; then
        # if there are more than 5 options allow selecting from a menu
        zstyle ':completion:*'               menu select=5
    else
        # don't use any menus at all
        setopt no_auto_menu
    fi
    zstyle ':completion:*:messages'        format '%d'
    zstyle ':completion:*:options'         auto-description '%d'
    # describe options in full
    zstyle ':completion:*:options'         description 'yes'
    # on processes completion complete all user processes
    zstyle ':completion:*:processes'       command 'ps -au$USER'
    # offer indexes before parameters in subscripts
    zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
    # provide verbose completion information
    zstyle ':completion:*'                 verbose true
    zstyle ':completion:*:-command-:*:'    verbose false
    # set format for warnings
    zstyle ':completion:*:warnings'        format $'%{\e[0;31m%}No matches for:%{\e[0m%} %d'
    # define files to ignore for zcompile
    zstyle ':completion:*:*:zcompile:*'    ignored-patterns '(*~|*.zwc)'
    zstyle ':completion:correct:'          prompt 'correct to: %e'
    # Ignore completion functions for commands you don't have:
    zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'
    # Provide more processes in completion of programs like killall:
    zstyle ':completion:*:processes-names' command 'ps c -u ${USER} -o command | uniq'
    # complete manual by their section
    zstyle ':completion:*:manuals'    separate-sections true
    zstyle ':completion:*:manuals.*'  insert-sections   true
    zstyle ':completion:*:man:*'      menu yes select
    # Search path for sudo completion
    zstyle ':completion:*:sudo:*' command-path /usr/local/sbin \
                                               /usr/local/bin  \
                                               /usr/sbin       \
                                               /usr/bin        \
                                               /sbin           \
                                               /bin            \
                                               /usr/X11R6/bin  \
                                               /var/lib/flatpak/exports/bin \
                                               $HOME/.local/bin 

    # provide .. as a completion
    zstyle ':completion:*' special-dirs ..

    # run rehash on completion so new installed program are found automatically:
    function _force_rehash () {
        (( CURRENT == 1 )) && rehash
        return 1
    }

    ## correction
    # some people don't like the automatic correction - so run 'NOCOR=1 zsh' to deactivate it
    if [[ "$NOCOR" -gt 0 ]] ; then
        zstyle ':completion:*' completer _oldlist _expand _force_rehash _complete _files _ignored
        setopt nocorrect
    else
        # try to be smart about when to use what completer...
        setopt correct
        zstyle -e ':completion:*' completer '
            if [[ $_last_try != "$HISTNO$BUFFER$CURSOR" ]] ; then
                _last_try="$HISTNO$BUFFER$CURSOR"
                reply=(_complete _match _ignored _prefix _files)
            else
                if [[ $words[1] == (rm|mv) ]] ; then
                    reply=(_complete _files)
                else
                    reply=(_oldlist _expand _force_rehash _complete _ignored _correct _approximate _files)
                fi
            fi'
    fi

    # command for process lists, the local web server details and host completion
    zstyle ':completion:*:urls' local 'www' '/var/www/' 'public_html'

    # Some functions, like _apt and _dpkg, are very slow. We can use a cache in
    # order to speed things up
    if [[ ${GRML_COMP_CACHING:-yes} == yes ]]; then
        GRML_COMP_CACHE_DIR=${GRML_COMP_CACHE_DIR:-${ZDOTDIR:-$HOME}/.cache}
        if [[ ! -d ${GRML_COMP_CACHE_DIR} ]]; then
            command mkdir -p "${GRML_COMP_CACHE_DIR}"
        fi
        zstyle ':completion:*' use-cache  yes
        zstyle ':completion:*:complete:*' cache-path "${GRML_COMP_CACHE_DIR}"
    fi

    # host completion
    _etc_hosts=()
    _ssh_config_hosts=()
    _ssh_hosts=()
    if [[ -r ~/.ssh/config ]] ; then
       _ssh_config_hosts=(${${(s: :)${(ps:\t:)${${(@M)${(f)"$(<$HOME/.ssh/config)"}:#Host *}#Host }}}:#*[*?]*})
    fi
    if [[ -r ~/.ssh/known_hosts ]] ; then
        _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*})
    fi
    if [[ -r /etc/hosts ]] && [[ "$NOETCHOSTS" -eq 0 ]] ; then
       : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(grep -v '^0\.0\.0\.0\|^127\.0\.0\.1\|^::1 ' /etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}}
    fi

    local localname
    localname="$(uname -n)"
    hosts=(
        "${localname}"
        "$_ssh_config_hosts[@]"
        "$_ssh_hosts[@]"
        "$_etc_hosts[@]"
        localhost
    )
    zstyle ':completion:*:hosts' hosts $hosts
    # TODO: so, why is this here?
    for compcom in cp deborphan df feh fetchipac gpasswd head hnb ipacsum mv \
                   pal stow uname ; do
        [[ -z ${_comps[$compcom]} ]] && compdef _gnu_generic ${compcom}
    done; unset compcom

    # see upgrade function in this file
    compdef _hosts upgrade
}

# Colors.
red='\e[0;31m'
RED='\e[1;31m'
green='\e[0;32m'
GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
blue='\e[0;34m'
BLUE='\e[1;34m'
purple='\e[0;35m'
PURPLE='\e[1;35m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m'
